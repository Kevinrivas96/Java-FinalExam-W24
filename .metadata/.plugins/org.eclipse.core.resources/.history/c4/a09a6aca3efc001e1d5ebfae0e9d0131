package kevinrivas_ex01;

import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;



public class ProductController implements Initializable {

    @FXML
    private TableView<Product> resultsOutput;

    @FXML
    private Button clearBtn;

    @FXML
    private Button searchBtn;

    @FXML
    private TextField productName;
    
    @FXML
    private TextField productID;

    
    private Connection connection;
    private PreparedStatement selectAllStatement;
    private PreparedStatement searchStatement;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/productsdb", "root", "Welcome1");

            selectAllStatement = connection.prepareStatement("SELECT * FROM products");

            // Configure the columns in the TableView to match your database columns
            TableColumn<Product, Integer> productIDCol = new TableColumn<>("Product ID");
            productIDCol.setCellValueFactory(new PropertyValueFactory<>("productID"));

            TableColumn<Product, String> nameCol = new TableColumn<>("Name");
            nameCol.setCellValueFactory(new PropertyValueFactory<>("name"));

            TableColumn<Product, String> manufacturerNameCol = new TableColumn<>("Manufacturer Name");
            manufacturerNameCol.setCellValueFactory(new PropertyValueFactory<>("manufacturerName"));

            TableColumn<Product, Double> pricePerUnitCol = new TableColumn<>("Price Per Unit");
            pricePerUnitCol.setCellValueFactory(new PropertyValueFactory<>("pricePerUnit"));

            resultsOutput.getColumns().addAll(productIDCol, nameCol, manufacturerNameCol, pricePerUnitCol);

            clearBtn.setOnAction(this::clearAll);
            searchBtn.setOnAction(this::searchProduct);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void displayAll(ActionEvent event) {
        try {
            resultsOutput.getItems().clear();
            ResultSet resultSet = selectAllStatement.executeQuery();
            while (resultSet.next()) {
                int productID = resultSet.getInt("ProductID");
                String name = resultSet.getString("Name");
                String manufacturerName = resultSet.getString("ManufacturerName");
                double pricePerUnit = resultSet.getDouble("PricePerUnit");
                resultsOutput.getItems().add(new Product(productID, name, manufacturerName, pricePerUnit));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void clearAll(ActionEvent event) {
        resultsOutput.getItems().clear();
    }

    @FXML
    private void searchProduct(ActionEvent event) {
        try {
            String searchName = productName.getText().trim();
            String searchID = productID.getText().trim();
            String query = "SELECT * FROM products WHERE Name = ? OR ProductID = ?";
            PreparedStatement searchStatement = connection.prepareStatement(query);
            searchStatement.setString(1, searchName);
            searchStatement.setString(2, searchID);
            ResultSet resultSet = searchStatement.executeQuery();
            resultsOutput.getItems().clear();
            while (resultSet.next()) {
                int productID = resultSet.getInt("ProductID");
                String name = resultSet.getString("Name");
                String manufacturerName = resultSet.getString("ManufacturerName");
                double pricePerUnit = resultSet.getDouble("PricePerUnit");
                resultsOutput.getItems().add(new Product(productID, name, manufacturerName, pricePerUnit));
            }
            searchStatement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    // Don't forget to close the connection when done
    public void close() {
        try {
            if (selectAllStatement != null) {
                selectAllStatement.close();
            }
            if (searchStatement != null) {
                searchStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
